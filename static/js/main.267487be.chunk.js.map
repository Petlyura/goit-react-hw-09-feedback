{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","defaultProps","FeedbackOptions","onLeaveFeedback","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","setTotal","positive","setPositive","useEffect","Math","round","target","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAGMA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACGD,GAAS,6BAAKA,IACdC,MAILF,EAAQG,aAAe,CACrBF,MAAO,IAQMD,QCEAI,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,oCACE,wBAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,EAA3C,kBAGA,wBAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,EAA9C,qBAGA,wBAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,EAA1C,qBCSWI,EAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCAWC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,8BAAMA,KCI7B,SAASC,IAOtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KACA,EAA0BH,mBAAS,GAAnC,mBAAOL,EAAP,KAAcS,EAAd,KACA,EAAgCJ,qBAAhC,mBAAOK,EAAP,KAAiBC,EAAjB,KAoDA,OA9BAC,qBAAU,WACRH,EAASZ,EAAOC,EAAUC,KACzB,CAACF,EAAMC,EAASC,IAUnBa,qBAAU,WACAD,EAARX,EAAoBa,KAAKC,MAAOjB,EAAOG,EAAS,KAAoB,KACnE,CAACH,EAAMG,IAiBR,qCACE,cAAC,EAAD,CAASZ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBI,gBAjDK,SAAC,GAC3B,OADoD,EAAvBuB,OAAUrB,MAErC,IAAK,OACHY,GAAQ,SAACU,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHT,GAAW,SAACS,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHR,GAAO,SAACQ,GAAD,OAAeA,EAAY,WA0CpC,cAAC,EAAD,UACGhB,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBS,IAGtB,cAAC,EAAD,CAAcP,QAAQ,2BChFhCc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,W","file":"static/js/main.267487be.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => (\n  <section>\n    {title && <h2>{title}</h2>}\n    {children}\n  </section>\n);\n\nSection.defaultProps = {\n  title: \"\",\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\n  <section>\n    <button type=\"button\" name=\"good\" onClick={onLeaveFeedback}>\n      Good\n    </button>\n    <button type=\"button\" name=\"neutral\" onClick={onLeaveFeedback}>\n      Neutral\n    </button>\n    <button type=\"button\" name=\"bad\" onClick={onLeaveFeedback}>\n      Bad\n    </button>\n  </section>\n);\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <ul>\n    <li>Good: {good}</li>\n    <li>Neutral: {neutral}</li>\n    <li>Bad: {bad}</li>\n    <li>Total: {total}</li>\n    <li>Positive feedback: {positivePercentage}%</li>\n  </ul>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <div>{message}</div>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState, useEffect } from \"react\";\n\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nexport default function App() {\n  // state = {\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  // };\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [positive, setPositive] = useState();\n\n  // handleLeaveFeedback = ({ target: { name } }) => {\n  //   this.setState((prevState) => ({ [name]: prevState[name] + 1 }));\n  // };\n\n  const handleLeaveFeedback = ({ target: { name } }) => {\n    switch (name) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    setTotal(good + neutral + bad);\n  }, [good, neutral, bad]);\n\n  // countTotalFeedback = () => {\n  //   const total = Object.values(this.state).reduce(\n  //     (acc, value) => acc + value,\n  //     0\n  //   );\n  //   return total;\n  // };\n\n  useEffect(() => {\n    total ? setPositive(Math.round((good / total) * 100)) : setPositive(0);\n  }, [good, total]);\n\n  // countPositiveFeedbackPercentage = () => {\n  //   const total = this.countTotalFeedback();\n  //   const positiveFeedback = this.state.good;\n  //   const positiveFeedbackPercentage = total\n  //     ? Math.round((positiveFeedback / total) * 100)\n  //     : 0;\n\n  //   return positiveFeedbackPercentage;\n  // };\n\n  // render() {\n  //   const { good, neutral, bad } = this.state;\n  //   const totalFeedback = this.countTotalFeedback();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions onLeaveFeedback={handleLeaveFeedback} />\n      </Section>\n      <Section>\n        {total ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positive}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}